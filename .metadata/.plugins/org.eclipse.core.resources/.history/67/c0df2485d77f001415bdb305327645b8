package ie.dit.naylor.mark;

import java.io.IOException;
import java.security.Principal;
import java.util.ArrayList;

import com.google.appengine.api.blobstore.BlobKey;
import com.google.appengine.api.blobstore.BlobstoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

import javax.servlet.http.*;

import org.datanucleus.store.types.sco.backed.Map;

@SuppressWarnings("serial")
public class DownloadServlet extends HttpServlet 
{
	private com.google.appengine.api.blobstore.BlobstoreService blobstoreService = BlobstoreServiceFactory.getBlobstoreService();
	public static ArrayList<File> files = new ArrayList<File>();
	public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException 
	{
		UserService userService = UserServiceFactory.getUserService();
		userService.getCurrentUser();
		String thisURL = req.getRequestURI();
		String logoutURL = userService.createLogoutURL(thisURL);
		Principal myPrincipal = req.getUserPrincipal();
		String loginURL = userService.createLoginURL(thisURL);
		if(myPrincipal == null) 
		{
			resp.getWriter().println("<p>You are not logged in</p>");
			resp.getWriter().println("<p>You can <a href=\""+ loginURL + "\">sign in here</a>.</p>");
			resp.getWriter().println("<p>You can continue <a href=\"/view\"as guest</a>here.</p>");

		}
		if (myPrincipal != null)
		{
			/*resp.getWriter().println("<p>Upload <a href=\""+ "upload.jsp"+ "\">here</a>.</p>");
			if (myPrincipal.getName().equals("marknaylor2006@gmail.com") || myPrincipal.getName().equals("mark@dit.ie"))
			{
				for (int i = 0; i < files.size(); i++)
				{
					resp.getWriter().println("<p>View <a href=\"serve?blob-key=" + files.get(i).getBlobKey().toString().trim() + "\">" + files.get(i).getFileName() + "</a>.</p>");
				}
				resp.getWriter().println("<p>You can <a href=\""+logoutURL+ "\">log out here</a>.</p>");
			}
			else
			{
				for (int i = 0; i < files.size(); i++)
				{
					resp.getWriter().println("<p>View <a href=\"serve?blob-key=" + files.get(i).getBlobKey().toString().trim() + "\">" + files.get(i).getFileName() + "</a>.</p>");
				}
			}*/
			
			Query q = new Query("owner");
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			// Use PreparedQuery interface to retrieve results
			PreparedQuery pq = datastore.prepare(q);


			for (Entity result : pq.asIterable()) 
			{
			  String fname = (String) result.getProperty("fname");
			  String imagekey = (String) result.getProperty("key");
			  String owner = (String) result.getProperty("owner");
			  String isPublic = (bool) result.getProperty("public");

			  System.out.println(fname + ", " + imagekey + ", " + owner + ", " + isPublic);
			}
		}
	}
}